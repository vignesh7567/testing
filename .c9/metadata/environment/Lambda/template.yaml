{"filter":false,"title":"template.yaml","tooltip":"/Lambda/template.yaml","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":174,"column":21},"action":"insert","lines":["AWSTemplateFormatVersion: 2010-09-09","Transform: AWS::Serverless-2016-10-31","Description: Building basic cloudformation","Parameters:","    Environment:","        Type: String","        Default: dev","        AllowedValues:","            - dev","            - test","            - prod","    ","Mappings:","  VPCConfig:","    VPC:","      CIDR: '10.0.0.0/16'","  Subnets:","    subnetone:","      CIDR: '10.0.0.0/24'","    subnettwo: ","      CIDR: '10.0.1.0/24'","Resources:   ","    RPS3Scripts:","        Type: \"AWS::S3::Bucket\"","        Properties:","            BucketName : !Sub '${Environment}-s3-cf-scripts'            ","            VersioningConfiguration:","                Status: Enabled","    ","    VPC:","        Type: AWS::EC2::VPC","        Properties:","          EnableDnsSupport: true","          EnableDnsHostnames: true","          CidrBlock: !FindInMap ['VPCConfig', 'VPC', 'CIDR']","    PrivateSubnetOne:","        Type: AWS::EC2::Subnet","        Properties:","          AvailabilityZone:","             Fn::Select:","             - 0","             - Fn::GetAZs: {Ref: 'AWS::Region'}","          VpcId: !Ref 'VPC'","          CidrBlock: !FindInMap ['Subnets', 'subnetone', 'CIDR']","    PrivateSubnetTwo:","        Type: AWS::EC2::Subnet","        Properties:","          AvailabilityZone:","             Fn::Select:","             - 1","             - Fn::GetAZs: {Ref: 'AWS::Region'}","          VpcId: !Ref 'VPC'","          CidrBlock: !FindInMap ['Subnets', 'subnettwo', 'CIDR']","    myDBEC2SecurityGroup:","        Type: AWS::EC2::SecurityGroup","        Properties:","          GroupDescription: Frontend Access","          VpcId: !Ref 'VPC'","          SecurityGroupIngress:","          - IpProtocol: tcp","            FromPort: 5432","            ToPort: 5432","            CidrIp: 10.0.0.0/16","                ","    RPS3:","        Type: \"AWS::S3::Bucket\"","        Properties:","            BucketName : !Sub '${Environment}-s3-cf'            ","            VersioningConfiguration:","                Status: Enabled","    RPLambda:","        Type: AWS::Serverless::Function ","        Properties:","            CodeUri: build","            Handler: rpfunction.lambda_handler","            Runtime: python3.6","            Policies:","                - CloudWatchLogsFullAccess","                - AmazonEC2ContainerServiceforEC2Role","                - AmazonS3FullAccess ","                - AWSLambdaBasicExecutionRole","                - AmazonVPCReadOnlyAccess","                - AWSLambdaVPCAccessExecutionRole","            VpcConfig:","                SecurityGroupIds: ","                    - !Ref myDBEC2SecurityGroup","                SubnetIds: ","                    - !Ref PrivateSubnetOne","                    - !Ref PrivateSubnetTwo","            Environment:","              Variables:","                Environment: !Ref Environment","            Events:","              S3bucketEvent:","                Type: S3","                Properties: ","                  Bucket: !Ref RPS3","                  Events: s3:ObjectCreated:*","                  Filter:","                    S3Key:","                      Rules:","                        - Name: \"Prefix\"","                          Value: \"testfolder/\"","    ","    ","","    User1:","        Type: \"AWS::IAM::User\"","        Properties:","            UserName: !Sub '${Environment}-RL-user1'","            ","    User2:","        Type: \"AWS::IAM::User\"","        Properties:","            UserName: !Sub '${Environment}-RL-user2'","            ","    User1Policy:","        Type: AWS::IAM::Policy","        Properties:","            PolicyName: \"root\"","            PolicyDocument:","                Version: \"2012-10-17\"","                Statement:","                    - Effect: \"Allow\"","                      Action: \"s3:ListBucket\"","                      Resource: !Sub \"arn:aws:s3:::${Environment}-s3-cf\"","                    - Effect: \"Allow\"","                      Action:","                        - \"s3:ListAllMyBuckets\"","                        - \"s3:HeadBucket\"","                        - \"s3:PutObject\"","                        - \"s3:*Tag*\"","                      Resource: \"*\"","            Users:","                - !Ref User1","    User2Policy:","        Type: AWS::IAM::Policy","        Properties:","            PolicyName: \"root\"","            PolicyDocument:","               Version: \"2012-10-17\"","               Statement:","                    - Effect: \"Allow\"","                      Action: \"s3:ListBucket\"","                      Resource: !Sub \"arn:aws:s3:::${Environment}-s3-cf\"","                    - Effect: \"Allow\"","                      Action:","                        - \"s3:ListAllMyBuckets\"","                        - \"s3:HeadBucket\"","                        - \"s3:GetObject\"","                      Resource: \"*\"","            Users:","                - !Ref User2","    ","    s3bucketPolicy:","        Type: \"AWS::S3::BucketPolicy\"","        Properties:","            Bucket: !Ref RPS3","            PolicyDocument:","              Statement:","                - Sid: \"Put Object Permision - User1\"","                  Action: \"s3:PutObject\"","                  Effect: \"Allow\"","                  Resource: !Sub \"arn:aws:s3:::${RPS3}/testfolder/*\"","                  Principal:","                    AWS: !GetAtt User1.Arn","                - Sid: \"Get Object Permision - AgiConverter User\"","                  Action: \"s3:GetObject\"","                  Effect: \"Allow\"","                  Resource: !Sub \"arn:aws:s3:::${RPS3}/testfolder/*\"","                  Principal:","                    AWS: !GetAtt User2.Arn","                    ","","                     "],"id":1}],[{"start":{"row":74,"column":21},"end":{"row":74,"column":31},"action":"remove","lines":["rpfunction"],"id":3},{"start":{"row":74,"column":21},"end":{"row":74,"column":22},"action":"insert","lines":["p"]},{"start":{"row":74,"column":22},"end":{"row":74,"column":23},"action":"insert","lines":["y"]},{"start":{"row":74,"column":23},"end":{"row":74,"column":24},"action":"insert","lines":["t"]}],[{"start":{"row":74,"column":24},"end":{"row":74,"column":25},"action":"insert","lines":["h"],"id":4},{"start":{"row":74,"column":25},"end":{"row":74,"column":26},"action":"insert","lines":["o"]},{"start":{"row":74,"column":26},"end":{"row":74,"column":27},"action":"insert","lines":["n"]},{"start":{"row":74,"column":27},"end":{"row":74,"column":28},"action":"insert","lines":["t"]},{"start":{"row":74,"column":28},"end":{"row":74,"column":29},"action":"insert","lines":["e"]}],[{"start":{"row":74,"column":29},"end":{"row":74,"column":30},"action":"insert","lines":["s"],"id":5},{"start":{"row":74,"column":30},"end":{"row":74,"column":31},"action":"insert","lines":["t"]}]]},"ace":{"folds":[],"scrolltop":840.859375,"scrollleft":0,"selection":{"start":{"row":74,"column":31},"end":{"row":74,"column":31},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1579335369807,"hash":"87c7f553c541d6a271cd034114fadd1986b027e7"}